<% layout('partials/boilerplate') %>
<style>
  #main-video-area .main-video-wrapper {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    position: relative;
  }
  #main-video-area video {
    width: 100%;
    height: auto;
    border-radius: 8px;
    background: #222;
  }
  #thumbnail-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    justify-content: center;
  }
  #thumbnail-grid .thumbnail-video-wrapper {
    width: 100px;
    max-width: 30vw;
    min-width: 70px;
    position: relative;
  }
  #thumbnail-grid video {
    width: 100%;
    height: auto;
    border-radius: 6px;
    background: #222;
  }
  @media (max-width: 600px) {
    #main-video-area .main-video-wrapper {
      max-width: 100vw;
    }
    #thumbnail-grid .thumbnail-video-wrapper {
      max-width: 45vw;
    }
    .video-controls {
      flex-direction: column !important;
      gap: 8px !important;
    }
  }
</style>
<div class="container py-4">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card bg-dark text-light shadow">
        <div class="card-header bg-secondary text-white">Video Conference</div>
        <div class="card-body">
          <div id="room-join-section">
            <form id="room-form" class="d-flex gap-2 mb-3">
              <input id="room-input" class="form-control" placeholder="Enter room name..." required />
              <button class="btn btn-primary" type="submit">Join Room</button>
            </form>
          </div>
          <div id="video-section" style="display:none;">
            <div class="mb-2"><span class="fw-bold">Room:</span> <span id="room-name"></span></div>
            <div id="main-video-area" class="mb-3"></div>
            <div class="d-flex flex-wrap gap-2" id="thumbnail-grid"></div>
            <div class="mt-3 video-controls d-flex flex-wrap gap-2 justify-content-center">
              <button id="leave-btn" class="btn btn-danger">Leave Room</button>
              <button id="mute-btn" class="btn btn-secondary ms-2">Mute</button>
              <button id="camera-btn" class="btn btn-secondary ms-2">Camera Off</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/simple-peer@9.11.1/simplepeer.min.js"></script>
<script>
// UI Elements
const roomForm = document.getElementById('room-form');
const roomInput = document.getElementById('room-input');
const roomJoinSection = document.getElementById('room-join-section');
const videoSection = document.getElementById('video-section');
const roomNameSpan = document.getElementById('room-name');
const videoGrid = document.getElementById('video-grid');
const leaveBtn = document.getElementById('leave-btn');
const muteBtn = document.getElementById('mute-btn');
const cameraBtn = document.getElementById('camera-btn');

let localStream = null;
let currentRoom = null;
let socket = io();
let peers = {};
let videoStreams = {};
let audioAnalyzers = {};
let activeSpeaker = null;
let mainVideoArea = null;
let thumbnailGrid = null;
let pinnedSpeaker = null;

roomForm.onsubmit = async (e) => {
  e.preventDefault();
  const room = roomInput.value.trim();
  if (!room) return;
  currentRoom = room;
  roomNameSpan.textContent = room;
  roomJoinSection.style.display = 'none';
  videoSection.style.display = '';
  await startLocalVideo();
  socket.emit('join-room', room);
};

leaveBtn.onclick = () => {
  if (currentRoom) {
    socket.emit('leave-room', currentRoom);
    Object.values(peers).forEach(pc => pc.close());
    peers = {};
    // Remove all video streams and analyzers
    videoStreams = {};
    audioAnalyzers = {};
    activeSpeaker = null;
    pinnedSpeaker = null;
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      localStream = null;
    }
    // Reset UI
    mainVideoArea.innerHTML = '';
    thumbnailGrid.innerHTML = '';
    videoSection.style.display = 'none';
    roomJoinSection.style.display = '';
    roomInput.value = '';
    currentRoom = null;
    roomNameSpan.textContent = '';
  }
};

muteBtn.onclick = () => {
  if (localStream) {
    const audioTrack = localStream.getAudioTracks()[0];
    if (audioTrack) {
      audioTrack.enabled = !audioTrack.enabled;
      muteBtn.textContent = audioTrack.enabled ? 'Mute' : 'Unmute';
    }
  }
};

cameraBtn.onclick = () => {
  if (localStream) {
    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
      videoTrack.enabled = !videoTrack.enabled;
      cameraBtn.textContent = videoTrack.enabled ? 'Camera Off' : 'Camera On';
    }
  }
};

// After DOM loads, get main/thumbnail areas
window.addEventListener('DOMContentLoaded', () => {
  mainVideoArea = document.getElementById('main-video-area');
  thumbnailGrid = document.getElementById('thumbnail-grid');
});

async function startLocalVideo() {
  try {
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    addVideoStream(localStream, 'You');
    setupAudioAnalyzer('You', localStream);
  } catch (err) {
    alert('Could not access camera/microphone.');
  }
}

function addVideoStream(stream, label) {
  videoStreams[label] = stream;
  setupAudioAnalyzer(label, stream);
  renderVideos();
}

function removeVideo(label) {
  delete videoStreams[label];
  if (audioAnalyzers[label]) {
    audioAnalyzers[label].disconnect();
    delete audioAnalyzers[label];
  }
  renderVideos();
}

function renderVideos() {
  if (!mainVideoArea || !thumbnailGrid) {
    mainVideoArea = document.getElementById('main-video-area');
    thumbnailGrid = document.getElementById('thumbnail-grid');
  }
  mainVideoArea.innerHTML = '';
  thumbnailGrid.innerHTML = '';
  // Determine which video is main: pinned > active > first
  let mainLabel = pinnedSpeaker && videoStreams[pinnedSpeaker]
    ? pinnedSpeaker
    : (activeSpeaker && videoStreams[activeSpeaker] ? activeSpeaker : Object.keys(videoStreams)[0]);
  Object.entries(videoStreams).forEach(([label, stream]) => {
    if (label === mainLabel) {
      const videoWrapper = document.createElement('div');
      videoWrapper.className = 'main-video-wrapper d-flex flex-column align-items-center';
      videoWrapper.dataset.label = label;
      const video = document.createElement('video');
      video.autoplay = true;
      video.playsInline = true;
      video.muted = (label === 'You');
      video.srcObject = stream;
      videoWrapper.appendChild(video);
      // Speaker name overlay for main video
      const overlay = document.createElement('div');
      overlay.className = 'position-absolute top-0 start-0 w-100 text-center py-1 fw-bold';
      overlay.style.background = 'rgba(0,0,0,0.4)';
      overlay.style.color = '#fff';
      overlay.textContent = (pinnedSpeaker ? 'ðŸ“Œ ' : '') + label + (activeSpeaker === label && !pinnedSpeaker ? ' (Speaking)' : '');
      videoWrapper.style.position = 'relative';
      videoWrapper.appendChild(overlay);
      videoWrapper.style.border = '3px solid #0d6efd';
      videoWrapper.style.borderRadius = '8px';
      const name = document.createElement('div');
      name.className = 'text-center mt-1 small';
      name.textContent = label;
      videoWrapper.appendChild(name);
      mainVideoArea.appendChild(videoWrapper);
    } else {
      const videoWrapper = document.createElement('div');
      videoWrapper.className = 'thumbnail-video-wrapper d-flex flex-column align-items-center';
      videoWrapper.dataset.label = label;
      const video = document.createElement('video');
      video.autoplay = true;
      video.playsInline = true;
      video.muted = (label === 'You');
      video.srcObject = stream;
      videoWrapper.appendChild(video);
      // Thumbnails: allow pinning
      videoWrapper.style.cursor = 'pointer';
      videoWrapper.onclick = () => {
        if (pinnedSpeaker === label) {
          pinnedSpeaker = null;
        } else {
          pinnedSpeaker = label;
        }
        renderVideos();
      };
      // Visual highlight for active speaker in thumbnails
      if (activeSpeaker === label && !pinnedSpeaker) {
        videoWrapper.style.border = '2px solid #ffc107';
        videoWrapper.style.borderRadius = '6px';
      } else {
        videoWrapper.style.border = '1px solid #444';
        videoWrapper.style.borderRadius = '6px';
      }
      const name = document.createElement('div');
      name.className = 'text-center mt-1 small';
      name.textContent = label;
      videoWrapper.appendChild(name);
      thumbnailGrid.appendChild(videoWrapper);
    }
  });
}

// Audio analysis for active speaker
function setupAudioAnalyzer(label, stream) {
  try {
    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const analyser = audioCtx.createAnalyser();
    const source = audioCtx.createMediaStreamSource(stream);
    source.connect(analyser);
    audioAnalyzers[label] = analyser;
    analyser.fftSize = 512;
    const dataArray = new Uint8Array(analyser.frequencyBinCount);
    function checkVolume() {
      analyser.getByteFrequencyData(dataArray);
      const avg = dataArray.reduce((a, b) => a + b, 0) / dataArray.length;
      analyser._lastVolume = avg;
      setTimeout(checkVolume, 200);
    }
    checkVolume();
  } catch (e) {}
}

// Active speaker detection loop
setInterval(() => {
  if (pinnedSpeaker) return; // Don't auto-switch if pinned
  let maxVolume = 0;
  let speaker = null;
  Object.entries(audioAnalyzers).forEach(([label, analyser]) => {
    const vol = analyser._lastVolume || 0;
    if (vol > maxVolume + 5) { // +5 to avoid flicker
      maxVolume = vol;
      speaker = label;
    }
  });
  if (speaker && speaker !== activeSpeaker) {
    activeSpeaker = speaker;
    renderVideos();
  }
}, 400);

socket.on('all-users', (users) => {
  users.forEach(userId => connectToNewUser(userId));
});

socket.on('user-joined', (userId) => {
  connectToNewUser(userId, true);
});

socket.on('signal', async ({ from, data }) => {
  if (peers[from]) {
    await peers[from].signal(data);
  }
});

socket.on('user-left', (userId) => {
  if (peers[userId]) {
    peers[userId].close();
    delete peers[userId];
    removeVideo(userId);
  }
});

function connectToNewUser(userId, initiator = false) {
  const peer = new SimplePeer({ initiator, trickle: false, stream: localStream });
  peers[userId] = peer;
  peer.on('signal', data => {
    socket.emit('signal', { to: userId, from: socket.id, data });
  });
  peer.on('stream', stream => {
    addVideoStream(stream, userId);
  });
  peer.on('close', () => {
    removeVideo(userId);
  });
}
</script>